#!/usr/bin/env python

import imp
import CedrusSConsHelperFunctions
import CedrusSConsDefaultEnvironments

import os
import sys

Import('env')

env.SetDefault(PYXID_FLAG = False)

# This is silly and just feels wrong to do, frankly. Seems like there should be a better way.
# We're doing this here because inheriting these from SuperLab can be dangerous and this
# seems like an alright idea in general. I just don't know, though.
env.Replace(
CXXFLAGS = [],
LIB_PATH = [],
CCPCHFLAGS = []
)

# should compute a path like: /Users/ematsak/source/xid_device_library
# (it should be where you CLONED the project: git@github.com:cedrus-opensource/xid_device_library.git)
sconscript_file = env.File(env)
outer_repo_root_dir = str(sconscript_file).replace(sconscript_file.get_string(env), '') + '..' + os.path.sep

# set wx version. we don't actually use wx here, but some of the helper code relies on it
env['WX_VERSION'] = 'NONE'
#os.environ['GMOCK'] = outer_repo_root_dir + 'binaries_gtest'

env = CedrusSConsDefaultEnvironments.GetDefaultSetupForCurrentSystemAndCommandLine( env )

project_target_name = 'xid_device_driver'

prefix = ''

if 'THE_CEDRUS_SUPERLAB_BUILD' in env or 'CEDRUS_XIDON_BUILD' in env:
    prefix = '$OBJ_ROOT/xid_device_library/'

inputs = [
    prefix + 'xid_device_driver/Connection.cpp',
    prefix + 'xid_device_driver/DeviceConfig.cpp',
    prefix + 'xid_device_driver/ResponseManager.cpp',
    prefix + 'xid_device_driver/XIDDeviceScanner.cpp',
    prefix + 'xid_device_driver/XIDDevice.cpp',
]

defines = []
cxxflags = []
frameworks = []

include_path = ['scons_helpers/cpp_src/']
lib_path = []

staging_dir = str(env.subst('$STAGING_DIR'))

project_target = staging_dir + os.path.sep

python_path = outer_repo_root_dir + 'Python27'

ftd2xx_loc = outer_repo_root_dir + 'ftd2xx'
include_path.append(ftd2xx_loc)
lib_path.append(ftd2xx_loc)

if sys.platform == 'win32':
    lib_dependencies = ['ftd2xx']
    include_path.append( python_path +'/win32/include/' )
    lib_path.append( python_path + '/win32/libs/' )
    env.Install( staging_dir, env.subst(ftd2xx_loc + '/ftd2xx.dll') )
    project_target += project_target_name + ".dll"

if sys.platform == 'darwin':
    lib_dependencies = ['ftd2xx.1.4.24']
    include_path.append( python_path +'/osx/include/' )
    lib_path.append( python_path +'/osx/libs/' )
    env.Install( staging_dir, env.subst(ftd2xx_loc + '/libftd2xx.1.4.24.dylib') )
    project_target += "lib" + project_target_name + ".dylib"

linkflags = []

if sys.platform == 'win32':
    linkflags = [ '/SUBSYSTEM:WINDOWS',  '/VERSION:4.5', '/MANIFEST', '/INCREMENTAL', ]

elif sys.platform == 'darwin':
    frameworks = ['CoreFoundation', 'IOKit']

# This will be used in CedrusSConsHelperFunctions
total_complete_staging = []
env.AppendUnique(CEDRUS_COMPLETE_THIRD_PARTY_STAGING = total_complete_staging)

staged_binary = CedrusSConsHelperFunctions.DeclareSConsSharedLibraryBuild(
    env,
    project_target_name,
    inputs,
    defines,
    include_path,
    cxxflags,
    frameworks,
    lib_dependencies,
    lib_path,
    linkflags
)

# This only serves to let an OSX app know what to include in the app bundle. This could
# be made darwin-only but there isn't really harm in always returning this information.
required_libs_for_copying = list(env['LIBS'])

# don't actually need to copy dylibs for this one
if 'libpython2.7' in required_libs_for_copying: required_libs_for_copying.remove('libpython2.7')

Return('required_libs_for_copying')
