#!/usr/bin/env python

import CedrusBoost
import CedrusSConsDefaultEnvironments
import CedrusSConsHelperFunctions
from CedrusBoost import CedrusBoostSettings

import os
import sys

env = CedrusSConsDefaultEnvironments.PerformCedrusSConsGlobalGeneralStartup()


prefix_for_sconscripts_in_other_repo = '../../'

# next line should compute a path like: /Users/kkheller/Documents/repositories/cloned_Xidon
# (it should be where you CLONED the project: git@github.com:cedrus/Xidon.git)
outer_repo_root_dir = os.path.abspath( os.getcwd() + os.path.sep + prefix_for_sconscripts_in_other_repo )
outer_repo_root_dir += os.path.sep
os.environ['QT_BINARIES_REPO'] = outer_repo_root_dir + 'qt-binaries'

# this is darwin-only because we have NOT YET re-configured the MSVC build to use boost-from-git, and gtest-from-git
if sys.platform == 'darwin':
    os.environ['BOOST'] =  outer_repo_root_dir + 'binaries_boost/install'
    os.environ['GMOCK'] = outer_repo_root_dir + 'binaries_gtest'

projects = [
    'SConscript.xid_device_driver',
    'SConscript.st_tester',
    #'SConscript.TestXidLib', # this is commented-out for the general public. the SConscript can be enabled at Cedrus.
]


env.Replace(
    CEDRUS_LISTING_OF_BUILD_SCONSCRIPTS = projects,
    TARGET_ARCH='x86'
)

if GetOption('build_mode') == 'opt':
    env.AppendUnique( CPPDEFINES = [ 'CEDRUS_DISABLE_ASSERT' ] )


env[ 'CURRENT_CEDRUS_REPO_ROOT' ] = sys.path[0] + '/../'
print 'Setting repo root to: ' + env[ 'CURRENT_CEDRUS_REPO_ROOT' ]

# this next line makes it so that the 'inputs' collection in any of
# our SConscript files ('inputs' is the second argument to things like
# env.SharedLibrary) can contain source files from *EITHER*
# 'Licenser/src/' *OR* 'Common/src/' *OR BOTH*.  Put another way:
# without this next line, Licenser SConscript files might not
# successfully be able to pull in source files from 'Common/src/'.
env.Repository( env[ 'CURRENT_CEDRUS_REPO_ROOT' ] )

# set boost and wx versions
env['BOOST_VERSION'] = '1_49'
if env['PLATFORM'] == 'darwin':
    env['BOOST_VERSION'] = '1_58'

env['WX_VERSION'] = '2.9'

# windows doesn't have a . in the version string for wxwidgets, so remove it
env['WIN_WX_VERSION'] = env['WX_VERSION'].replace('.','')

total_complete_staging = []

boostSetup = CedrusBoostSettings(env)
total_complete_staging += boostSetup.publish_all_libs_to_staging()

env['CEDRUS_COMPLETE_THIRD_PARTY_STAGING'] = total_complete_staging

def BuildEnvironmentSConscripts(masterConfig):

    for c in masterConfig['CEDRUS_LISTING_OF_BUILD_SCONSCRIPTS']:
        # Clone the environment so components can't interfere with each other
        ec = masterConfig.Clone()

        # The component is a SConscript file.
        c_script = ec.File(c)
        c_dir = c_script.dir # c_dir is important for the scripts in COMMON (not here side-by-side in our scons dir)

        variant_dir_string = '$OBJ_ROOT/' + str(c_dir)

        if sys.platform == 'win32' and str(c_dir) != '.':
            variant_dir_string = '$OBJ_ROOT/Cmv_dir_win32/dir_' + str(c_script.name) + '/'

        #print ec.subst( variant_dir_string )
        ec['CEDRUS_CHOSEN_VARIANT_DIR'] = variant_dir_string

        ec.SConscript(c_script,
                      variant_dir=variant_dir_string,
                      exports={'env': ec},   # this is why each SConscript has a line like: Import('env')
                      duplicate=0 # Sometimes I find it helpful to COMMENT THIS OUT for diagnosing scons issues
                      )

env = CedrusSConsDefaultEnvironments.GetDefaultSetupForCurrentSystemAndCommandLine( env )

print 'Name of selected build environment: ' + str(env['BUILD_TYPE_DESCRIPTION'])
BuildEnvironmentSConscripts(env)
