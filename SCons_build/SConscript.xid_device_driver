#!/usr/bin/env python

import CedrusBoost
import CedrusSConsDefaultEnvironments
import CedrusSConsHelperFunctions

import os
import sys

Import('env')

# this line is a keeper:
boost = CedrusBoost.CedrusBoostSettings(env)
boost.need_boost_filesystem()
boost.need_boost_system()
boost.need_boost_python()

project_target_name = 'xid_device_driver'

prefix = ''

if env.has_key( 'THE_CEDRUS_XIDON_BUILD' ):
    prefix = '$OBJ_ROOT/xid_device_library/'

inputs = [
    prefix + 'xid_device_driver/xid_con_t.cpp',
    prefix + 'xid_device_driver/xid_con_test_only.cpp',
    prefix + 'xid_device_driver/xid_device_config_t.cpp',
    prefix + 'xid_device_driver/response_mgr.cpp',
    prefix + 'xid_device_driver/xid_glossary.cpp',
    prefix + 'xid_device_driver/xid_device_scanner_t.cpp',
    prefix + 'xid_device_driver/base_device_t.cpp',
    prefix + 'xid_device_driver/device_factory.cpp',
    prefix + 'xid_device_driver/xid_device_t.cpp',
    prefix + 'xid_device_driver/xid2_device.cpp',
    prefix + 'xid_device_driver/stim_tracker_t.cpp',
    prefix + 'xid_device_driver/py_binding.cpp',
]

defines = [ 'CEDRUS_XID_MAKEDLL' ]
cxxflags = []
frameworks = []

include_path = [ prefix + 'scons_helpers/cpp_src/']
lib_path = []

staging_dir = str(env.subst('$STAGING_DIR'))

name_of_pyd = staging_dir + os.path.sep + "xid"
project_target = staging_dir + os.path.sep

python_path = os.getenv('PYTHON','')

if sys.platform == 'win32':
    lib_dependencies = ['ftd2xx']
    include_path.append( python_path +'/win32/include/' )
    lib_path.append( python_path + '/win32/libs/' )
    env.Install( staging_dir, env.subst('ftd2xx.dll') )
    project_target += project_target_name + ".dll"
    name_of_pyd += ".pyd"

if sys.platform == 'darwin':
    lib_dependencies = ['ftd2xx.1.2.2', 'libpython2.7']
    include_path.append( python_path +'/osx/include/' )
    lib_path.append( python_path +'/osx/libs/' )
    env.Install( staging_dir, env.subst('libftd2xx.1.2.2.dylib') )
    project_target += "lib" + project_target_name + ".dylib"
    name_of_pyd += ".so"

# Clean up potentially outdated versions of the XID Python extension and the test
Execute( Delete(name_of_pyd) )
name_of_test = 'xid_commands.py'
Execute( Delete( staging_dir + os.path.sep + name_of_test ) )

# Install fresh ones by copying the XID library file as XID Python extension and replacing the test.
env.InstallAs( name_of_pyd, project_target )
env.Install( staging_dir, Dir('#').abspath + '/../' + os.path.sep + 'Tests' + os.path.sep + name_of_test )

linkflags = []

if sys.platform == 'win32':
    linkflags = [ '/SUBSYSTEM:WINDOWS',  '/VERSION:4.5', '/MANIFEST', '/INCREMENTAL', ]

elif sys.platform == 'darwin':
    frameworks = ['CoreFoundation', 'IOKit']

staged_binary = CedrusSConsHelperFunctions.DeclareSConsSharedLibraryBuild(
    env,
    project_target_name,
    inputs,
    defines,
    include_path,
    cxxflags,
    frameworks,
    lib_dependencies,
    lib_path,
    linkflags
)
