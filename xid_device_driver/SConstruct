import CedrusBoost
import CedrusSConsDefaultEnvironments
import CedrusSConsHelperFunctions

import os

# next 3 lines. legit. necessary in all cedrus sconstructs.
env = CedrusSConsDefaultEnvironments.PerformCedrusSConsGlobalGeneralStartup()
env['BOOST_VERSION'] = '1_49'
#env['CEDRUS_SCONSCRIPT_PROJECT_NAME'] = 'xid_device_driver'


# superlab does something to read this from the command-line. so this should NOT be hard-coded:
env['BUILD_TYPE'] = 'dbg'

env['WX_VERSION'] = '2.9'# '2.9'  # make this NOT EVEN NECESSARY?

# necessary.  seems like it MUST come AFTER setting the BOOST_VERSION and CEDRUS_SCONSCRIPT_PROJECT_NAME
env = CedrusSConsDefaultEnvironments.GetDefaultSetupForCurrentSystemAndCommandLine( env )

env['CEDRUS_COMPLETE_THIRD_PARTY_STAGING'] = ''
# this line is a keeper:
boost = CedrusBoost.CedrusBoostSettings(env)

project_target_name = 'xid_device_driver'

PATH_TO_FILES = '../xid_device_driver/'
inputs = [
PATH_TO_FILES + 'base_device_t.cpp', 
PATH_TO_FILES + 'port_settings_t.cpp', 
PATH_TO_FILES + 'stim_tracker_t.cpp',
PATH_TO_FILES + 'xid_con_t.cpp', 
PATH_TO_FILES + 'xid_device_config_t.cpp', 
PATH_TO_FILES + 'xid_device_scanner_t.cpp', 
PATH_TO_FILES + 'xid_device_t.cpp',
]

defines = []
include_path = []
cxxflags = []
frameworks = []
lib_dependencies = []
lib_path = []
# can these go inside a helper?
linkflags = [ '/SUBSYSTEM:WINDOWS',  '/VERSION:4.5', '/MANIFEST', '/INCREMENTAL', ]

CedrusSConsHelperFunctions.DeclareSConsStaticLibraryBuild(
    env,
    project_target_name,
    inputs,
    defines,
    include_path,
    cxxflags,
    frameworks,
    lib_dependencies,
    lib_path,
    linkflags
)